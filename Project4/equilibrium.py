#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
This program contains plotting procedures for plotting the equilibrium
situation
"""

import os
import numpy as np
import matplotlib.pyplot as plt
import sys

name = sys.argv[1]

# Set fontsizes in figures
params = {'legend.fontsize': 'x-large',
          'axes.labelsize': 'x-large',
          'axes.titlesize': 'x-large',
          'xtick.labelsize': 'x-large',
          'ytick.labelsize': 'x-large'}
plt.rcParams.update(params)

T = [1, 2.4]
for t in T:
    os.system("mpirun -np 1 ./simulation.x 2000 0 20 %s 1" % t)
    # Information about the dimmensions of the data set
    meta = np.loadtxt("./Results/meta.txt", usecols=0)

    cycles = int(meta[0])
    cores = int(meta[2])
    L = int(meta[3])

    # data set generated by the Monte Carlo simulation
    array = np.fromfile("./Results/data.dat", dtype="int32", count=-1)

    E = array[:cycles]
    M = array[cycles:2 * cycles]

    fig = plt.figure()
    plt.plot(E / float(L**2))
    plt.xlabel("Monte Carlo Cycles [#]")
    plt.ylabel("$E/L^2$ $[\,J\,]$")
    plt.legend(["%sx%s Lattice\nT = %s $[\,J/k_B\,]$" % (L, L, t)])
    plt.grid()
    plt.gcf().set_tight_layout(True)
    fig.savefig("./Plots/plot_energy_T=%s_%s.pdf" % (t, name))

    fig = plt.figure()
    plt.plot(M / float(L**2))
    plt.xlabel("Monte Carlo Cycles [#]")
    plt.ylabel("$|M|/L^2$")
    plt.legend(["%sx%s Lattice\nT = %s $[\,J/k_B\,]$" % (L, L, t)])
    plt.grid()
    plt.gcf().set_tight_layout(True)
    fig.savefig("./Plots/plot_magnetization_T=%s_%s.pdf" % (t, name))
