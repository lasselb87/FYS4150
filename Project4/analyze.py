#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
This program contains procedures for analyzing the data from the simulation
and calculates the expectation values
"""

import numpy as np

# Information about the dimmensjons of the data set
meta = np.loadtxt("./Results/meta.txt", usecols=0)

cycles = int(meta[0])
cutoff = int(meta[1])
cores = int(meta[2])
L = int(meta[3])
T = float(meta[4])

# data set generated by the Monte Carlo simulation
file = "./Results/data.dat"
array = np.fromfile(file, dtype="int32", count=-1)

length = (cycles - cutoff) * cores

E = np.zeros((cores, cycles))
M = np.zeros((cores, cycles))

for i in range(cores):
    start = 2 * cycles * i
    end = 2 * cycles * i + cycles
    E[i] = array[start:end]
    M[i] = array[(start + cycles):(end + cycles)]

E_mean = 0
M_mean = 0
E2 = 0
M2 = 0

for i in range(cores):
    truncE = E[i, cutoff:cycles]  # Cuts off the start of each array
    truncM = M[i, cutoff:cycles]

    E_mean += sum(truncE)  # Calculates the mean
    M_mean += sum(truncM)

    E2 += sum(truncE**2)
    M2 += sum(truncM**2)


E_mean /= length  # Normalizes
M_mean /= length
E2 /= length
M2 /= length

Cv = 1 / T**2 * (E2 - E_mean**2)
X = 1 / T * (M2 - M_mean**2)

E_mean /= L**2  # Per spin
M_mean /= L**2
Cv /= L**2
X /= L**2

print("T = %s" % T)
print("Energy = %s" % E_mean)
print("Magnetization = %s" % M_mean)
print("Heat Capacity  = %s" % Cv)
print("Susceptibility  = %s" % X)

np.savetxt("./Results/expectation.txt", (T, E_mean, M_mean, Cv, X))
